name: Build, Deploy

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"
          cache: gradle

      - name: Decode Keystore
        id: decode_keystore
        if: ${{ github.event_name != 'pull_request' || github.ref_type == 'tag' }}
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: ${{ vars.RELEASE_KEYSTORE }}
          fileDir: ${{ github.workspace }}
          encodedString: ${{ secrets.KEYSTORE }}

      - name: Generate keystore.properties
        if: ${{ github.event_name != 'pull_request' || github.ref_type == 'tag' }}
        run: |
          if [ -n "${{ secrets.RELEASEKEYPASSWORD }}" ]; then
            echo releaseKeyAlias="${{ vars.RELEASE_KEY_ALIAS }}" >> keystore.properties
            echo releaseKeyPassword="${{ secrets.RELEASEKEYPASSWORD }}" >> keystore.properties
            echo releaseKeyStore=$(pwd)/"${{ vars.RELEASE_KEYSTORE }}" >> keystore.properties
            echo releaseStorePassword="${{ secrets.RELEASESTOREPASSWORD }}" >> keystore.properties
          fi

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/4.0-dev' }}

      - name: Build with Gradle
        run: ./gradlew assemble

      - name: Read Output Metadata
        id: read_output_metadata
        uses: juliangruber/read-file-action@v1
        with:
          path: ./app/build/outputs/apk/release/output-metadata.json
          trim: true

      - name: Upload Release Package
        env:
          version_code: ${{ fromJSON(steps.read_output_metadata.outputs.content).elements[0].versionCode }}
          version_name: ${{ fromJSON(steps.read_output_metadata.outputs.content).elements[0].versionName }}
        uses: actions/upload-artifact@v3
        with:
          name: "release-${{ env.version_name }}(${{ env.version_code }})"
          path: ./app/build/outputs/apk/release

      - name: Upload Debug Package
        env:
          version_code: ${{ fromJSON(steps.read_output_metadata.outputs.content).elements[0].versionCode }}
          version_name: ${{ fromJSON(steps.read_output_metadata.outputs.content).elements[0].versionName }}
        uses: actions/upload-artifact@v3
        with:
          name: "debug-${{ env.version_name }}(${{ env.version_code }})"
          path: ./app/build/outputs/apk/debug

      - name: Upload Mapping
        uses: actions/upload-artifact@v4
        with:
          name: mapping
          path: ./app/build/outputs/mapping/release

      - name: Post to channel
        if: contains(github.event.head_commit.message, '[skip post]') == false && github.event_name != 'pull_request'
        env:
          CHANNEL_ID: ${{ secrets.CHANNEL_DEV_ID }}
          BOT_TOKEN: ${{ secrets.BOT_DEV_TOKEN }}
          MAPPING: ./app/build/outputs/mapping/release/mapping.txt
          COMMIT_URL: ${{ github.event.head_commit.url }}
          COMMIT_MESSAGE: |+
            ```
            ${{ github.event.head_commit.message }}
            ```

            构建分支：[${{ github.ref }}](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }})
            构建版本：[${{ github.sha }}]("$COMMIT_URL")
          ACTION_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          if [ -n "$BOT_TOKEN" ] && [ -n "$CHANNEL_ID" ]; then
            export RELEASE=$(find ./app/build/outputs/apk/release -name "*.apk")
            export DEBUG=$(find ./app/build/outputs/apk/debug -name "*.apk")
            ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ["COMMIT_MESSAGE"]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ["COMMIT_URL"])))'`
            curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%22media%22%3A%22attach%3A%2F%2Frelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%22media%22%3A%22attach%3A%2F%2Fdebug%22%7D%2C%7B%22type%22%3A%22document%22%2C%22media%22%3A%22attach%3A%2F%2Fmapping%22%2C%22parse_mode%22%3A%22MarkdownV2%22%2C%22caption%22%3A${ESCAPED}%7D%5D&reply_markup=%7B%22inline_keyboard%22%3A%20%5B%5B%7B%22text%22%3A%20%22%E5%9C%A8+Github+%E4%B8%8A%E6%9F%A5%E7%9C%8B%22%2C%20%22url%22%3A%20${ACTION_URL}%7D%5D%5D%7D" -F release="@$RELEASE" -F debug="@$DEBUG" -F mapping="@$MAPPING"
          fi

      - name: Upload Mapping to App Center
        if: ${{ success() && secrets.APP_CENTER_TOKEN && secrets.APP_CENTER_APP }}
        env:
          version_code: ${{ fromJSON(steps.read_output_metadata.outputs.content).elements[0].versionCode }}
          version_name: ${{ fromJSON(steps.read_output_metadata.outputs.content).elements[0].versionName }}
        uses: saurav-aggarwal/appcenter-cli-action@1.0.1
        with:
          token: ${{ secrets.APP_CENTER_TOKEN }}
          command: appcenter crashes upload-mappings -c ${{ env.version_code }} -n ${{ env.version_name }} -m ${{ github.workspace }}/app/build/outputs/mapping/release/mapping.txt -a ${{ secrets.APP_CENTER_APP }}
